/*
Consider a stack of nonnegative integers with capacity n (for some fixed n).

Model a transition system representation of this stack. You may abstract from the values on
the stack and use the operations top, pop, and push with their usual meaning.

Use the variable name s for the stack.
*/

module Stack {
  var item: integer;
  var item_set_from_stack: boolean;
  var request_pop: boolean;
  var request_push: boolean;
  var request_top: boolean;
  var stack_pointer: integer;
  var stack: [integer]integer;
  var n: integer;

  init {
    stack_pointer = 0;
    n = (if (n > 0) then n else 1);
    item = 0;

  }
  procedure step()
    modifies stack;
    modifies item_set_from_stack;
    modifies stack_pointer;
    modifies item;
  {
    if (n > 0) {
      item_set_from_stack = request_top;
      if ((request_top && (stack_pointer >= 0)) && (stack_pointer < n)) {
        item = stack[stack_pointer];
      } else {
        if (request_pop) {
          if (stack_pointer > 0) {
            stack_pointer = (stack_pointer - 1);
          }
        } else {
          if (request_push) {
            if (stack_pointer < n) {
              stack = stack[stack_pointer -> item];
              stack_pointer = (stack_pointer + 1);
            }
          }
        }
      }
      item = (if (item >= 0) then item else 0);
    }
  }

  next {
    call step();
  }
}
