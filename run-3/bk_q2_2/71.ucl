/*
We are given three (primitive) processes P1,P2, and P3 with shared integer variable x. 
The program of each process is as follows:

for x = 1,...,10 do
 LOAD(x);
 INC(x);
 STORE(x);
od

That is, each process executes ten times the assignment x:=x+1.

The assignment x := x+1 is realized using the three actions LOAD(x), INC(x) and STORE(x).
 Consider now the parallel program:

x := 0;
P1 || P2 || P3

Build a model of the parallel program. Write a property that checks if P has an execution
 that halts with the terminal value x=2.

Use the variable name x
*/

module Module {
  type Bit = boolean;

  var incrementing: Bit;
  var loading: Bit;
  var x: bv3;

  init {
    x = 0bv3;
    loading = false;
    incrementing = false;

  }
  next {
    if (loading) {
      x' = (x + 1bv3);
      loading' = false;
      incrementing' = true;
    } else {
      if (incrementing) {
        x' = (x + 1bv3);
        loading' = true;
        incrementing' = false;
      }
    }

  }
}
module ParallelProgram {
  type Bit = boolean;

  var incrementing: Bit;
  var loading: Bit;
  var x: bv3;

  instance p1: Module();
  instance p2: Module();
  instance p3: Module();

  next {
    next(p1);
    next(p2);
    next(p3);

  }
}
