/*
Build a model for the classic dining philosophers problem:

Five philosophers are sitting at a round table with a bowl of rice in the middle.
 For the philosophers (being a little unworldly) life consists of thinking and eating
  (and waiting, as we will see). 
  To take some rice out of the bowl, a philosopher needs two chopsticks.
   In between two neighboring philosophers, however, there is only a single chopstick.
    Thus, at any time only one of two neighboring philosophers can eat. 
    Of course, the use of the chopsticks is exclusive and eating with hands is forbidden.


Write a property that checks whether deadlock is possible.

Use the variable names phil1, phil2, phil3, phil4, phil5, chopstick1, chopstick2, chopstick3, chopstick4, and chopstick5
*/

module DiningPhilosophers {
  var used: boolean;
  var spec: boolean;
  var chopstick1: boolean;
  var chopstick2: boolean;
  var chopstick3: boolean;
  var chopstick4: boolean;
  var chopstick5: boolean;
  var phil1_intends_to_eat: boolean;
  var phil2_intends_to_eat: boolean;
  var phil3_intends_to_eat: boolean;
  var phil4_intends_to_eat: boolean;
  var phil5_intends_to_eat: boolean;

  procedure step()
    modifies spec;
  {
    spec = spec;
    spec = (phil1_inv == phil1_intends_to_eat);
    spec = (phil2_inv == phil2_intends_to_eat);
    spec = (phil3_inv == phil3_intends_to_eat);
    spec = (phil4_inv == phil4_intends_to_eat);
    spec = (phil5_inv == phil5_intends_to_eat);
    spec = (chopstick1_inv != (phil1_intends_to_eat != phil5_intends_to_eat));
    spec = (chopstick2_inv != (phil1_intends_to_eat != phil2_intends_to_eat));
    spec = (chopstick3_inv != (phil2_intends_to_eat != phil3_intends_to_eat));
    spec = (chopstick4_inv != (phil3_intends_to_eat != phil4_intends_to_eat));
    spec = (chopstick5_inv != (phil4_intends_to_eat != phil5_intends_to_eat));
  }

  next {
    call step();
  }
}
