/*
Build a model for the classic dining philosophers problem:

Five philosophers are sitting at a round table with a bowl of rice in the middle.
 For the philosophers (being a little unworldly) life consists of thinking and eating
  (and waiting, as we will see). 
  To take some rice out of the bowl, a philosopher needs two chopsticks.
   In between two neighboring philosophers, however, there is only a single chopstick.
    Thus, at any time only one of two neighboring philosophers can eat. 
    Of course, the use of the chopsticks is exclusive and eating with hands is forbidden.


Write a property that checks whether deadlock is possible.

Use the variable names phil1, phil2, phil3, phil4, phil5, chopstick1, chopstick2, chopstick3, chopstick4, and chopstick5
*/

module DiningPhilosophers {
  type chopstick = boolean;
  type philosopher = boolean;

  var choose: integer;
  var chopstick1: chopstick;
  var chopstick2: chopstick;
  var chopstick3: chopstick;
  var chopstick4: chopstick;
  var chopstick5: chopstick;
  var phil1: philosopher;
  var phil2: philosopher;
  var phil3: philosopher;
  var phil4: philosopher;
  var phil5: philosopher;

  procedure step()
    modifies choose;
  {
    choose = 65;
    choose = choose;
  }

  next {
    call step();
  }
}
