/*
Build a model of a concurrent program, in which three processes, Inc, Dec, and Reset, cooperate. They operate on the shared integer variable x with arbitrary initial value that can be accessed (i.e., read), and modified (i.e., written) by each of the individual processes.

The processes are:
proc Inc = while true do if x<200 then x:=x+1 fi od
proc Dec = while true do if x>0 then x:= xâˆ’1 fi od
proc Reset = while true do if x=200 then x:=0 fi od

Process Inc increments x if its value is smaller than 200, Dec decrements x if its value is at least 1, and Reset resets x once it has reached the value 200. They all do so repetitively.

Write an invariant that checks if the value of x is always between (and including) 0 and 200.

Use the variable name x.
*/

module Module {
  var process_dec: boolean;
  var process_inc: boolean;
  var process_reset: boolean;
  var x: integer;

  init {
    x = 26; 

  }
  next {
    process_inc' = ((x < 200) && (x == (x + 1))); 
    process_dec' = ((x > 0) && (x == (x - 1))); 
    process_reset' = ((x == 200) && (x == 0)); 
    x' = (if (process_inc) then (x + 1) else (if (process_dec) then (x - 1) else (if (process_reset) then 0 else x))); 

  }
  invariant x_inv : ((x >= 0) && (x <= 200));
}
