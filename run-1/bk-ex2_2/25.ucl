/*
Model a preliminary design of a beverage vending machine. The machine can either deliver beer or soda.

The state space is S = { pay , select , soda , beer }. The set of initial states consists of only one state, i.e., I = { pay }. The (user) action insert coin denotes the insertion of a coin, while the (machine) actions get soda and get beer denote the delivery of soda and beer, respectively.

Use the variable names pay, select, soda and beer.

Write an LTL property that checks that the vending machine only delivers a drink after being provided with a coin. You may introduce auxiliary variables to do this if you need to.
*/

module VendingMachine {
  type coins = boolean;

  var current_state: enum { beer, pay, select, soda };
  var has_coin: coins;
  var allowed_to_deliver: coins;

  input insert_coin: coins;
  input choice_flag: coins;

  init {
    has_coin = false; 
    allowed_to_deliver = false; 

  }
  procedure step()
    modifies has_coin;
    modifies allowed_to_deliver;
    modifies current_state;
  {
    if ((current_state == soda) || (current_state == beer)) {
      allowed_to_deliver = false; 
    }
    if (current_state == select) {
      has_coin = false; 
    }
    if ((current_state == pay) && insert_coin) {
      current_state = select; 
      has_coin = true; 
    } else {
      if ((current_state == select) && choice_flag) {
        current_state = soda; 
        allowed_to_deliver = true; 
        has_coin = false; 
      } else {
        if ((current_state == select) && !choice_flag) {
          current_state = beer; 
          allowed_to_deliver = true; 
          has_coin = false; 
        }
      }
    }
  }

  next {
    call step();
  }
  invariant pay_inv : ((current_state == pay) ==> !allowed_to_deliver);
  invariant current_state_inv : current_state;
  invariant insert_coin_inv : ((current_state == pay) ==> insert_coin);
  invariant has_coin_inv : ((current_state == select) ==> has_coin);
  invariant allowed_to_deliver_inv : (has_coin ==> allowed_to_deliver);
  invariant select_inv : ((current_state == select) ==> !choice_flag);
  invariant soda_inv : ((current_state == soda) ==> allowed_to_deliver);
  invariant beer_inv : ((current_state == beer) ==> allowed_to_deliver);

}
