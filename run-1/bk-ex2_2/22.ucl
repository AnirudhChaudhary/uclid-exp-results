/*
Model a preliminary design of a beverage vending machine. The machine can either deliver beer or soda.

The state space is S = { pay , select , soda , beer }. The set of initial states consists of only one state, i.e., I = { pay }. The (user) action insert coin denotes the insertion of a coin, while the (machine) actions get soda and get beer denote the delivery of soda and beer, respectively.

Use the variable names pay, select, soda and beer.

Write an LTL property that checks that the vending machine only delivers a drink after being provided with a coin. You may introduce auxiliary variables to do this if you need to.
*/


module BeverageVendingMachine {
  var has_coin: boolean;
  var machine_action: enum { beer, get_beer, get_soda, insert_coin, pay, select, soda };
  var state: enum { beer, get_beer, get_soda, insert_coin, pay, select, soda };
  var user_action: enum { beer, get_beer, get_soda, insert_coin, pay, select, soda };

  init {
    state = pay; 
    has_coin = false; 

  }
  procedure step()
    modifies state;
    modifies has_coin;
  {
    if (state == pay) {
      if (user_action == insert_coin) {
        has_coin = true; 
      }
    }
    if ((state == pay) && has_coin) {
      state = select; 
    }
    if (state == select) {
      if ((machine_action == get_soda) && has_coin) {
        state = soda; 
        has_coin = false; 
      } else {
        if ((machine_action == get_beer) && has_coin) {
          state = beer; 
          has_coin = false; 
        }
      }
    }
  }

  next {
    call step();
  }
  invariant spec: (((state == beer) || (state == soda)) == has_coin);
}
