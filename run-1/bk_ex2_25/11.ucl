Consider the processes P1 and P2 with the shared variables b1, b2, and x.
b1 and b2 are Boolean variables, while x can take either the value 1 or 2, i.e., dom(x) = {1,2}. The scheduling strategy is realized using x as follows. If both processes want to enter the critical section (i.e., they are in location waiti), the value of variable x decides which of the two processes may enter its critical section: if x = i, then Pi may enter its critical section (for i = 1, 2). On entering location wait1, process P1 performs x := 2, thus giving privilege to process P2 to enter the critical section. The value of x thus indicates which process has its turn to enter the critical section. Symmetrically, P2 sets x to 1 when starting to wait. The variables bi provide information about the current location of Pi.

More precisely,

bi =waiti OR criti.

bi is set when Pi starts to wait. In pseudocode, P1 performs as follows (the code for process P2 is similar):

loop forever
.
.
.
⟨b1 := true; x := 2⟩;
wait until (x = 1 ∨ ¬b2)
do critical section od
b1 := false
.
.
.
end loop

Build a transition system that models the interleaving of P1 and P2.

Use the variable names b1, b2 and x.


module Module {
  var b1: boolean;
  var b1_next: boolean;
  var b2: boolean;
  var b2_next: boolean;
  var wait1: boolean;
  var wait2: boolean;
  var x: bv2;
  var x_next: bv2;

  init {
    b1 = false; 
    b2 = false; 
    x = 1bv2; 

  }
  next {
    if (b1) {
      x_next' = (if (wait1) then 2bv2 else x); 
    } else {
      if (b2) {
        x_next' = (if (wait2) then 1bv2 else x); 
      }
    }
    b1_next' = (wait1 && (x == 1bv2)); 
    b2_next' = (wait2 && (x == 2bv2)); 

  }
}
