/*
Build a model for the classic dining philosophers problem:

Five philosophers are sitting at a round table with a bowl of rice in the middle. For the philosophers (being a little unworldly) life consists of thinking and eating (and waiting, as we will see). To take some rice out of the bowl, a philosopher needs two chopsticks. In between two neighboring philosophers, however, there is only a single chopstick. Thus, at any time only one of two neighboring philosophers can eat. Of course, the use of the chopsticks is exclusive and eating with hands is forbidden.

Write a property that checks whether deadlock is possible.

Use the variable names phil1, phil2, phil3, phil4, phil5, chopstick1, chopstick2, chopstick3, chopstick4, and chopstick5
*/

module Module {
  var deadlock: boolean;
  var phil1: boolean;
  var phil2: boolean;
  var phil3: boolean;
  var phil4: boolean;
  var phil5: boolean;
  var chopstick1_inv: boolean;
  var chopstick2_inv: boolean;
  var chopstick3_inv: boolean;
  var chopstick4_inv: boolean;
  var chopstick5_inv: boolean;

  invariant deadlock_inv : !(((((phil1 && phil2) || (phil2 && phil3)) || (phil3 && phil4)) || (phil4 && phil5)) || (phil5 && phil1));
  invariant phil1_inv : ((phil1 && chopstick5_inv) || (phil1 && chopstick1_inv));
  invariant phil2_inv : ((phil2 && chopstick1_inv) || (phil2 && chopstick2_inv));
  invariant phil3_inv : ((phil3 && chopstick2_inv) || (phil3 && chopstick3_inv));
  invariant phil4_inv : ((phil4 && chopstick3_inv) || (phil4 && chopstick4_inv));
  invariant phil5_inv : ((phil5 && chopstick4_inv) || (phil5 && chopstick5_inv));
  invariant chopstick1_inv : (phil1 ==> !phil2);
  invariant chopstick2_inv : (phil2 ==> !phil3);
  invariant chopstick3_inv : (phil3 ==> !phil4);
  invariant chopstick4_inv : (phil4 ==> !phil5);
  invariant chopstick5_inv : (phil5 ==> !phil1);
  invariant deadlock1 : !(((((phil1 && phil2) || (phil1 && phil5)) || (phil2 && phil3)) || (phil3 && phil4)) || (phil4 && phil5));
  invariant deadlock2 : !(((((phil1 && phil2) || (phil2 && phil3)) || (phil2 && phil5)) || (phil3 && phil4)) || (phil4 && phil5));
  invariant deadlock3 : !(((((phil1 && phil2) || (phil2 && phil3)) || (phil3 && phil4)) || (phil4 && phil5)) || (phil5 && phil1));
  invariant deadlock4 : !(((((phil1 && phil2) || (phil1 && phil5)) || (phil2 && phil3)) || (phil3 && phil4)) || (phil4 && phil5));
  invariant deadlock5 : !(((((phil1 && phil5) || (phil2 && phil3)) || (phil3 && phil4)) || (phil4 && phil5)) || (phil5 && phil1));
  invariant deadlock_possible : (deadlock_inv ==> deadlock);
}
