Build a model for the classic dining philosophers problem:

Five philosophers are sitting at a round table with a bowl of rice in the middle. For the philosophers (being a little unworldly) life consists of thinking and eating (and waiting, as we will see). To take some rice out of the bowl, a philosopher needs two chopsticks. In between two neighboring philosophers, however, there is only a single chopstick. Thus, at any time only one of two neighboring philosophers can eat. Of course, the use of the chopsticks is exclusive and eating with hands is forbidden.


Write a property that checks whether deadlock is possible.

Use the variable names phil1, phil2, phil3, phil4, phil5, chopstick1, chopstick2, chopstick3, chopstick4, and chopstick5


module DiningPhilosophers {
  var phil1: boolean;
  var phil2: boolean;
  var phil3: boolean;
  var phil4: boolean;
  var phil5: boolean;
  var chopstick1: boolean;
  var chopstick2: boolean;
  var chopstick3: boolean;
  var chopstick4: boolean;
  var chopstick5: boolean;

  next {
    chopstick1' = (phil5 != phil1); 
    chopstick2' = (phil1 != phil2); 
    chopstick3' = (phil2 != phil3); 
    chopstick4' = (phil3 != phil4); 
    chopstick5' = (phil4 != phil5); 
    phil1' = (chopstick5 && chopstick1); 
    phil2' = (chopstick1 && chopstick2); 
    phil3' = (chopstick2 && chopstick3); 
    phil4' = (chopstick3 && chopstick4); 
    phil5' = (chopstick4 && chopstick5); 

  }
  invariant spec: !((((chopstick1 && chopstick2) && chopstick3) && chopstick4) && chopstick5);
}
