Build a model for the classic dining philosophers problem:

Five philosophers are sitting at a round table with a bowl of rice in the middle. For the philosophers (being a little unworldly) life consists of thinking and eating (and waiting, as we will see). To take some rice out of the bowl, a philosopher needs two chopsticks. In between two neighboring philosophers, however, there is only a single chopstick. Thus, at any time only one of two neighboring philosophers can eat. Of course, the use of the chopsticks is exclusive and eating with hands is forbidden.


Write a property that checks whether deadlock is possible.

Use the variable names phil1, phil2, phil3, phil4, phil5, chopstick1, chopstick2, chopstick3, chopstick4, and chopstick5


module Module {
  type Bit = boolean;

  var phil1: Bit;
  var phil2: Bit;
  var phil3: Bit;
  var phil4: Bit;
  var phil5: Bit;
  var chopstick1: Bit;
  var chopstick2: Bit;
  var chopstick3: Bit;
  var chopstick4: Bit;
  var chopstick5: Bit;

  init {
    phil1 = false; 
    phil2 = false; 
    phil3 = false; 
    phil4 = false; 
    phil5 = false; 
    chopstick1 = false; 
    chopstick2 = false; 
    chopstick3 = false; 
    chopstick4 = false; 
    chopstick5 = false; 

  }
  invariant phil1_inv : !(chopstick1 && chopstick5);
  invariant phil2_inv : !(chopstick1 && chopstick2);
  invariant phil3_inv : !(chopstick2 && chopstick3);
  invariant phil4_inv : !(chopstick3 && chopstick4);
  invariant phil5_inv : !(chopstick4 && chopstick5);
  invariant chopstick1_inv : !(phil1 && phil2);
  invariant chopstick2_inv : !(phil2 && phil3);
  invariant chopstick3_inv : !(phil3 && phil4);
  invariant chopstick4_inv : !(phil4 && phil5);
  invariant chopstick5_inv : !(phil5 && phil1);
}
