We are given three (primitive) processes P1,P2, and P3 with shared integer variable x. The program of each process is as follows:

for x = 1,...,10 do
 LOAD(x);
 INC(x);
 STORE(x);
od

That is, each process executes ten times the assignment x:=x+1.

The assignment x := x+1 is realized using the three actions LOAD(x), INC(x) and STORE(x). Consider now the parallel program:

x := 0;
P1 || P2 || P3

Build a model of the parallel program. Write a property that checks if P has an execution that halts with the terminal value x=2.

Use the variable name x


module P2 {
  var INC: integer;
  var LOAD: integer;
  var STORE: integer;

  init {
    LOAD = 0; 
    INC = 0; 
    STORE = 0; 

  }
}
module P1 {
  var INC: integer;
  var LOAD: integer;
  var STORE: integer;

  init {
    LOAD = 0; 
    INC = 0; 
    STORE = 0; 

  }
}
module P3 {
  var INC: integer;
  var LOAD: integer;
  var STORE: integer;

  init {
    LOAD = 0; 
    INC = 0; 
    STORE = 0; 

  }
}
module Process {
  var x: integer;

  init {
    x = 0; 

  }
  next {
    if (x < 10) {
      x' = (x + 1); 
    }

  }
}
module Parallel {
  instance p1: P1();
  instance p2: P2();
  instance p3: P3();

  invariant x_inv : ((p3.x <= 30) && ((p3.x >= 0) && ((p2.x <= 30) && ((p2.x >= 0) && ((p1.x >= 0) && (p1.x <= 30))))));
}
