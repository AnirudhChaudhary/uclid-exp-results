The following program is a mutual exclusion protocol for two processes due to Pnueli. There is a single shared variable s which is either 0 or 1, and initially 1. Besides, each process has a local Boolean variable y that initially equals 0. The program text for each process Pi (i=0,1) is as follows:


l0: loop forever do begin
l1: Noncritical section
l2: (yi, s) := (1, i);
l3: wait until ((y1−i = 0) ∨ (s ̸= i)); l4: Critical section
l5: yi := 0
end.


Here, the statement (yi, s) := (1, i); is a multiple assignment in which variable yi := 1 and s := i is a single, atomic step.

Model a parallel composition of P0 and P1.

Write a property that checks whether the algorithm ensures mutual exclusion and a property that checks whether the algorithm ensures starvation freedom.

Use the variable names given in the text.

module MutualExclusion {
  type Bit = boolean;

  var s: bv3;
  var s_val: Bit;
  var y0: bv3;
  var y0_val: Bit;
  var y1: bv3;
  var y1_val: Bit;

  procedure step()
    modifies s;
    modifies y1;
    modifies y0;
  {
    s = ((s + 1bv3) % 2bv3); 
    if (s == 0bv3) {
      if (y1_val) {
        y0 = 1bv3; 
        s = y1; 
      }
    }
    if (s == 1bv3) {
      if (y0_val) {
        y1 = 1bv3; 
        s = y0; 
      }
    }
  }

  next {
    call step();
  }
  invariant y0_inv : ((y0 == 0bv3) || (y0 == 1bv3));
  invariant y1_inv : ((y1 == 0bv3) || (y1 == 1bv3));
  invariant y1_val_inv : ((y1 == 0bv3) || (y1 == 1bv3));
  invariant y0_val_inv : ((y0 == 0bv3) || (y0 == 1bv3));
  invariant y1_inv : (y0 == 0bv3);
  invariant s_val_inv : (s_val == false);
  invariant s_inv : ((s == 0bv3) || (s == 1bv3));
  invariant y0_inv : (y0 == 0bv3);
  invariant y1_inv : (y1 == 0bv3);
  invariant y_val_inv : (s_val == false);

}
module ParallelComposition {
  type Bit = boolean;

  instance P0: MutualExclusion();
  instance P1: MutualExclusion();

  init {
    P0.s = 1; 
    P1.s = 1; 

  }
  invariant mutual_exclusion : ((P0.s != 1) || (P1.s != 1));
  invariant starvation_freedom : ((P0.y1 == 0) || (P1.y1 == 0));

  control  {
    v = bmc(3);
    check;
    print_results;
    v.print_cex();
  }
}
