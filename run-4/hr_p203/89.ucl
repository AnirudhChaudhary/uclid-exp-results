/*
The alternating bit protocol (ABP) is a protocol for transmitting messages along a 'lossy line,'
i.e., a line which may lose or duplicate messages.
 The protocol guarantees that, providing the line doesn't lose infinitely many messages, communication
  between the sender and the receiver will be successful. 
  (We allow the line to lose or duplicate messages, but it may not corrupt messages; however,
   there is no way of guaranteeing successful transmission along a line which can corrupt.)

The ABP works as follows. There are four entities, or agents: the sender, the receiver, the message channel
 and the acknowledgement channel. The sender transmits the first part of the message together with the 'control' bit 0.
  If, and when, the receiver receives a message with the control bit 0, it sends 0 along the acknowledgement channel.
   When the sender receives this acknowledgement, it sends the next packet with the control bit 1. 
   If and when the receiver receives this, it acknowledges by sending a 1 on the acknowledgement channel.
    By alternating the control bit, both receiver and sender can guard against duplicating messages and losing messages
     (i.e., they ignore messages that have the unexpected control bit).
If the sender doesn't get the expected acknowledgement, it continually re-sends the message, 
until the acknowledgement arrives. If the receiver doesn't get a message with the expected control bit,
 it continually resends the previous acknowledgement.

Write a model for the alternating bit protocol. 
Write a set of properties that check that your model behaves as described above.

Use the variable names st, message1, message2 and ack.
*/

module ABP {
  var st: bv1;
  var message1: bv8;
  var message2: bv8;
  var ack: bv1;

  input send_msg1: bv8;
  input send_msg2: bv8;

  output receive_msg1: bv8;
  output receive_msg2: bv8;

  next {
    if (((message1 == send_msg1) && (st == 0bv1)) && (ack == 0bv1)) {
      st' = 1bv1;
      message2' = send_msg2;
    }
    receive_msg1' = message1;
    receive_msg2' = message2;

  }
}
