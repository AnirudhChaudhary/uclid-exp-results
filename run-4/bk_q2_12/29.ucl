/*
Consider the following leader election algorithm: 
For n âˆˆ N, n processes P1,...,Pn are located in a ring topology where each process is
 connected by an unidirectional channel to its neighbor in a clockwise manner.

To distinguish the processes, each process is assigned a unique identifier id  in {1, . . . , n}.
 The aim is to elect the process with the highest identifier as the leader within the ring. 
 Therefore each process executes the following algorithm:

send (id);
while (true) do
receive (m);
if (m = id) then stop;
if (m > id) then send (m);
od

Model the leader election protocol for n processes as a channel system.

Use the variable names m, id
*/

module LeaderElection {
  type Bit = boolean;

  var m_received: bv32;
  var id: bv32;
  var m: bv32;
  var round: bv32;

  input initiator: Bit;

  output leader_id: bv32;

  init {
    round = 47bv32;

  }
  procedure step()
    modifies leader_id;
    modifies m;
    modifies round;
    modifies m_received;
  {
    round = (round + 1bv32);
    if (initiator) {
      m = id;
    }
    m_received = m;
    if (m_received > m) {
      m = m_received;
    }
    if (m_received == id) {
      leader_id = id;
    }
  }

  next {
    call step();
  }
}
