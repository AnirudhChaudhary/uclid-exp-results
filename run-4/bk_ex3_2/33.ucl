/*
Build a model for the classic dining philosophers problem:

Five philosophers are sitting at a round table with a bowl of rice in the middle.
 For the philosophers (being a little unworldly) life consists of thinking and eating
  (and waiting, as we will see). 
  To take some rice out of the bowl, a philosopher needs two chopsticks.
   In between two neighboring philosophers, however, there is only a single chopstick.
    Thus, at any time only one of two neighboring philosophers can eat. 
    Of course, the use of the chopsticks is exclusive and eating with hands is forbidden.


Write a property that checks whether deadlock is possible.

Use the variable names phil1, phil2, phil3, phil4, phil5, chopstick1, chopstick2, chopstick3, chopstick4, and chopstick5
*/

module Module {
  var chopstick1: enum { free, held };
  var chopstick2: enum { free, held };
  var chopstick3: enum { free, held };
  var chopstick4: enum { free, held };
  var chopstick5: enum { free, held };
  var deadlock_possible: boolean;

  init {
    chopstick1 = free;
    chopstick2 = free;
    chopstick3 = free;
    chopstick4 = free;
    chopstick5 = free;

  }
  next {
    deadlock_possible' = (((((chopstick1 == held) && (chopstick2 == held)) && (chopstick3 == held)) && (chopstick4 == held)) && (chopstick5 == held));

  }
}
