/*
We are given three (primitive) processes P1,P2, and P3 with shared integer variable x. The program of each process is as follows:

for x = 1,...,10 do
 LOAD(x);
 INC(x);
 STORE(x);
od

That is, each process executes ten times the assignment x:=x+1.

The assignment x := x+1 is realized using the three actions LOAD(x), INC(x) and STORE(x). Consider now the parallel program:

x := 0;
P1 || P2 || P3

Build a model of the parallel program. Write a property that checks if P has an execution that halts with the terminal value x=2.

Use the variable name x
*/

module SharedIntegerVariable {
  var x: integer;
  var P1_terminate: boolean;
  var P2_terminate: boolean;
  var P3_terminate: boolean;

  init {
    x = 0; 
    P1_terminate = false; 
    P2_terminate = false; 
    P3_terminate = false; 

  }
  next {
    x' = (if (x < 10) then (x + 1) else x); 
    P1_terminate' = (if (x == 2) then true else P1_terminate); 
    P2_terminate' = (if (x == 2) then true else P2_terminate); 
    P3_terminate' = (if (x == 2) then true else P3_terminate); 

  }
  invariant x_inv : ((x >= 0) && (x <= 30));
  invariant P1_terminate_inv : (P1_terminate ==> (x >= 2));
  invariant P2_terminate_inv : (P2_terminate ==> (x >= 2));
  invariant P3_terminate_inv : (P3_terminate ==> (x >= 2));

}
