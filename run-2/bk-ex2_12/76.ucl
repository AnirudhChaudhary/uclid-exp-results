/*
Model a design of a beverage vending machine. The machine can either deliver beer or soda. It counts the number of soda and beer bottles and returns inserted coins if the vending machine is empty.

The vending machine is represented by the two locations start and select, and has variables that store the number of soda bottles (nsoda), and the number of beer bottles (nbeer).

The following conditional transitions model the insertion of a coin and refilling the vending machine:

start --(true:coin)-> select
start --(true:refill)-> start

 Labels of conditional transitions are of the form (g : a ) where g is a Boolean condition (called guard), and a is an action that is possible once g holds. As the condition for both conditional transitions above always holds, the action coin is always enabled in the starting location. To keep things simple, we assume that by refill both storages are entirely refilled.

The following transitions model that soda (or beer) can be obtained if there is some soda (or beer) left in the vending machine:

select --(nsoda > 0:sget)-> start
select --(nbeer > 0:bget)-> start

Finally, the vending machine automatically switches to the initial start location while returning the inserted coin once there are no bottles left:

select --(nsoda=0 & nbeer=0: ret_coin) -> start

Let the maximum capacity of both bottle repositories be max. The insertion of a coin (by action coin) leaves the number of bottles unchanged. The same applies when a coin is returned (by action ret coin). The effect of the other actions is as follows:

refill : nsoda:=max & nbeer:=max
sget: nsoda:=nsoda-1
bget: nbeer:=nbeer-1

You may use boolean variables to indicate when an action is enabled.

Use the variable names nsoda, nbeer, sget, bget, refill, coin.
*/

module VendingMachine {
  var bget_enabled: boolean;
  var coin_enabled: boolean;
  var refill_enabled: boolean;
  var ret_coin_enabled: boolean;
  var sget_enabled: boolean;
  var nsoda: integer;
  var nbeer: integer;
  var sget: boolean;
  var bget: boolean;
  var refill: boolean;
  var coin: boolean;

  init {
    nsoda = 0; //58
    nbeer = 0; //62
    sget = false; //66
    bget = false; //70
    refill = false; //74
    coin = false; //78

  }
  procedure step()
    modifies refill;
    modifies sget;
    modifies coin_enabled;
    modifies sget_enabled;
    modifies refill_enabled;
    modifies ret_coin_enabled;
    modifies coin;
    modifies nsoda;
    modifies nbeer;
    modifies bget_enabled;
    modifies bget;
  {
    coin_enabled = true; //84
    refill_enabled = true; //88
    sget_enabled = (nsoda > 0); //96
    bget_enabled = (nbeer > 0); //104
    ret_coin_enabled = ((nsoda == 0) && (nbeer == 0)); //118
    if (coin_enabled) {
      coin = true; //125
    } else {
      coin = false; //130
    }
    if (refill_enabled) {
      refill = true; //138
    } else {
      refill = false; //143
    }
    if (sget_enabled) {
      sget = true; //151
    } else {
      sget = false; //156
    }
    if (bget_enabled) {
      bget = true; //164
    } else {
      bget = false; //169
    }
    if (ret_coin_enabled) {
      coin = false; //177
      refill = false; //181
      sget = false; //185
      bget = false; //189
      nsoda = 0; //193
      nbeer = 0; //197
    }
  }

  next {
    call step();
  }
  invariant spec: true;
  control  {
    v = bmc(3);
    check;
    print_results;
    v.print_cex();
  }
}
