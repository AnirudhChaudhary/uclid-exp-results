/*
Build a model of a concurrent program, in which three processes, Inc, Dec, and Reset, cooperate. They operate on the shared integer variable x with arbitrary initial value that can be accessed (i.e., read), and modified (i.e., written) by each of the individual processes.

The processes are:
proc Inc = while true do if x<200 then x:=x+1 fi od
proc Dec = while true do if x>0 then x:= xâˆ’1 fi od
proc Reset = while true do if x=200 then x:=0 fi od

Process Inc increments x if its value is smaller than 200, Dec decrements x if its value is at least 1, and Reset resets x once it has reached the value 200. They all do so repetitively.

Write an invariant that checks if the value of x is always between (and including) 0 and 200.

Use the variable name x.
*/

module ConcurrentProgram {
  instance inc: Inc();
  instance dec: Dec();
  instance reset: Reset();

}
module Inc {
  var x: integer;
  var y: integer;

  next {
    x' = (x + 1); 
    y' = (y + 1); 

  }
}
module Dec {
  var x: integer;

  next {
    x' = (x - 1); 

  }
}
module Reset {
  var x: integer;

  next {
    if (x == 200) {
      x' = 0; 
    }

  }
  invariant x_inv : ((x >= 0) && (x <= 200));

}
