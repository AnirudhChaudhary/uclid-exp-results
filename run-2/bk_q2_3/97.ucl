module Junction {
  type State = enum { amber, green, red, yellow };

  var L4_inv: boolean;
  var L1: State;
  var L2: State;
  var L3: State;
  var L4: State;

  init {
    L4 = amber; //43
    L2 = amber; //47
    L1 = green; //51
    L2 = red; //55
    L3 = green; //59
    L4 = red; //63

  }
  next {
    if ((L1 == green) && (L3 == green)) {
      L1' = amber; //81
      L3' = amber; //85
    } else {
      if ((L1 == amber) && (L3 == amber)) {
        L1' = red; //102
        L3' = red; //106
        L2' = green; //110
      } else {
        if (L2 == green) {
          L2' = amber; //121
          L4' = green; //125
        } else {
          if (L4 == green) {
            L4' = amber; //136
            L1' = green; //140
            L3' = green; //144
          }
        }
      }
    }

  }
  invariant l4_inv : ((L4 == green) && (L2 == amber));
  invariant L2_inv : (L2 == green);
  invariant L4_inv : (L4 == green);
  invariant L1_inv : (L1 == red);
  invariant L3_inv : (L3 == green);

  control  {
    v = bmc(3);
    check;
    print_results;
    v.print_cex();
  }
}
