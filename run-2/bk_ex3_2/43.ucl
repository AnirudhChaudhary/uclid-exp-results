/*
Build a model for the classic dining philosophers problem:

Five philosophers are sitting at a round table with a bowl of rice in the middle. For the philosophers (being a little unworldly) life consists of thinking and eating (and waiting, as we will see). To take some rice out of the bowl, a philosopher needs two chopsticks. In between two neighboring philosophers, however, there is only a single chopstick. Thus, at any time only one of two neighboring philosophers can eat. Of course, the use of the chopsticks is exclusive and eating with hands is forbidden.

Write a property that checks whether deadlock is possible.

Use the variable names phil1, phil2, phil3, phil4, phil5, chopstick1, chopstick2, chopstick3, chopstick4, and chopstick5
*/

module Module {
  var chopstick1_free: boolean;
  var chopstick1_used_by_phil1: boolean;
  var chopstick1_used_by_phil2: boolean;
  var chopstick1_used_by_phil5: boolean;
  var chopstick2_free: boolean;
  var chopstick2_used_by_phil1: boolean;
  var chopstick2_used_by_phil2: boolean;
  var chopstick2_used_by_phil3: boolean;
  var chopstick3_free: boolean;
  var chopstick3_used_by_phil2: boolean;
  var chopstick3_used_by_phil3: boolean;
  var chopstick3_used_by_phil4: boolean;
  var chopstick4_free: boolean;
  var chopstick4_used_by_phil3: boolean;
  var chopstick4_used_by_phil4: boolean;
  var chopstick4_used_by_phil5: boolean;
  var chopstick5_free: boolean;
  var chopstick5_used_by_phil1: boolean;
  var chopstick5_used_by_phil4: boolean;
  var chopstick5_used_by_phil5: boolean;
  var phil1_eating: boolean;
  var phil1_thinking: boolean;
  var phil2_eating: boolean;
  var phil2_thinking: boolean;
  var phil3_eating: boolean;
  var phil3_thinking: boolean;
  var phil4_eating: boolean;
  var phil4_thinking: boolean;
  var phil5_eating: boolean;
  var phil5_thinking: boolean;

  invariant phil1_inv : ((phil1_thinking || phil1_eating) && !(chopstick1_used_by_phil1 && chopstick5_used_by_phil1));
  invariant phil2_inv : ((phil2_thinking || phil2_eating) && !(chopstick1_used_by_phil2 && chopstick2_used_by_phil2));
  invariant phil3_inv : ((phil3_thinking || phil3_eating) && !(chopstick2_used_by_phil3 && chopstick3_used_by_phil3));
  invariant phil4_inv : ((phil4_thinking || phil4_eating) && !(chopstick3_used_by_phil4 && chopstick4_used_by_phil4));
  invariant phil5_inv : ((phil5_thinking || phil5_eating) && !(chopstick4_used_by_phil5 && chopstick5_used_by_phil5));
  invariant chopstick1_inv : ((chopstick1_used_by_phil5 && phil5_eating) || (chopstick1_free || (chopstick1_used_by_phil1 && phil1_eating)));
  invariant chopstick2_inv : ((chopstick2_used_by_phil2 && phil2_eating) || (chopstick2_free || (chopstick2_used_by_phil1 && phil1_eating)));
  invariant chopstick3_inv : ((chopstick3_used_by_phil3 && phil3_eating) || (chopstick3_free || (chopstick3_used_by_phil2 && phil2_eating)));
  invariant chopstick4_inv : ((chopstick4_used_by_phil4 && phil4_eating) || (chopstick4_free || (chopstick4_used_by_phil3 && phil3_eating)));
  invariant chopstick5_inv : ((chopstick5_used_by_phil5 && phil5_eating) || (chopstick5_free || (chopstick5_used_by_phil4 && phil4_eating)));

}
