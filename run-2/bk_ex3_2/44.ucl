/*
Build a model for the classic dining philosophers problem:

Five philosophers are sitting at a round table with a bowl of rice in the middle. For the philosophers (being a little unworldly) life consists of thinking and eating (and waiting, as we will see). To take some rice out of the bowl, a philosopher needs two chopsticks. In between two neighboring philosophers, however, there is only a single chopstick. Thus, at any time only one of two neighboring philosophers can eat. Of course, the use of the chopsticks is exclusive and eating with hands is forbidden.

Write a property that checks whether deadlock is possible.

Use the variable names phil1, phil2, phil3, phil4, phil5, chopstick1, chopstick2, chopstick3, chopstick4, and chopstick5
*/

module DiningPhilosophers {
  type Range = integer;
  type Philosopher = Range;
  type Chopstick = Range;

  var deadlocked: boolean;
  var phil1: Philosopher;
  var phil2: Philosopher;
  var phil3: Philosopher;
  var phil4: Philosopher;
  var phil5: Philosopher;
  var chopstick1: Chopstick;
  var chopstick2: Chopstick;
  var chopstick3: Chopstick;
  var chopstick4: Chopstick;
  var chopstick5: Chopstick;

  init {
    phil1 = 0; 
    phil2 = 1; 
    phil3 = 2; 
    phil4 = 3; 
    phil5 = 4; 
    chopstick1 = 0; 
    chopstick2 = 1; 
    chopstick3 = 2; 
    chopstick4 = 3; 
    chopstick5 = 4; 

  }
  next {
    deadlocked' = ((phil3 == phil5) && (phil2 == phil4)); 

  }
  invariant phil1_inv : ((phil1 == 0) || (phil1 == 1));
  invariant phil2_inv : ((phil2 == 0) || (phil2 == 1));
  invariant phil3_inv : ((phil3 == 0) || (phil3 == 1));
  invariant phil4_inv : ((phil4 == 0) || (phil4 == 1));
  invariant phil5_inv : ((phil5 == 0) || (phil5 == 1));
  invariant chopstick1_inv : ((chopstick1 == 0) || (chopstick1 == 1));
  invariant chopstick2_inv : ((chopstick2 == 0) || (chopstick2 == 1));
  invariant chopstick3_inv : ((chopstick3 == 0) || (chopstick3 == 1));
  invariant chopstick4_inv : ((chopstick4 == 0) || (chopstick4 == 1));
  invariant chopstick5_inv : ((chopstick5 == 0) || (chopstick5 == 1));
  invariant deadlocked_inv : (deadlocked != ((phil3 == phil5) && (phil2 == phil4)));

}
