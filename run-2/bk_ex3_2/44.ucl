module DiningPhilosophers {
  type Range = integer;
  type Philosopher = Range;
  type Chopstick = Range;

  var deadlocked: boolean;
  var phil1: Philosopher;
  var phil2: Philosopher;
  var phil3: Philosopher;
  var phil4: Philosopher;
  var phil5: Philosopher;
  var chopstick1: Chopstick;
  var chopstick2: Chopstick;
  var chopstick3: Chopstick;
  var chopstick4: Chopstick;
  var chopstick5: Chopstick;

  init {
    phil1 = 0; //71
    phil2 = 1; //75
    phil3 = 2; //79
    phil4 = 3; //83
    phil5 = 4; //87
    chopstick1 = 0; //91
    chopstick2 = 1; //95
    chopstick3 = 2; //99
    chopstick4 = 3; //103
    chopstick5 = 4; //107

  }
  next {
    deadlocked' = ((phil3 == phil5) && (phil2 == phil4)); //125

  }
  invariant phil1_inv : ((phil1 == 0) || (phil1 == 1));
  invariant phil2_inv : ((phil2 == 0) || (phil2 == 1));
  invariant phil3_inv : ((phil3 == 0) || (phil3 == 1));
  invariant phil4_inv : ((phil4 == 0) || (phil4 == 1));
  invariant phil5_inv : ((phil5 == 0) || (phil5 == 1));
  invariant chopstick1_inv : ((chopstick1 == 0) || (chopstick1 == 1));
  invariant chopstick2_inv : ((chopstick2 == 0) || (chopstick2 == 1));
  invariant chopstick3_inv : ((chopstick3 == 0) || (chopstick3 == 1));
  invariant chopstick4_inv : ((chopstick4 == 0) || (chopstick4 == 1));
  invariant chopstick5_inv : ((chopstick5 == 0) || (chopstick5 == 1));
  invariant deadlocked_inv : (deadlocked != ((phil3 == phil5) && (phil2 == phil4)));

  control  {
    v = bmc(3);
    check;
    print_results;
    v.print_cex();
  }
}
