/*
Build a model for the classic dining philosophers problem:

Five philosophers are sitting at a round table with a bowl of rice in the middle. For the philosophers (being a little unworldly) life consists of thinking and eating (and waiting, as we will see). To take some rice out of the bowl, a philosopher needs two chopsticks. In between two neighboring philosophers, however, there is only a single chopstick. Thus, at any time only one of two neighboring philosophers can eat. Of course, the use of the chopsticks is exclusive and eating with hands is forbidden.

Write a property that checks whether deadlock is possible.

Use the variable names phil1, phil2, phil3, phil4, phil5, chopstick1, chopstick2, chopstick3, chopstick4, and chopstick5
*/

module Module {
  var phil1: boolean;
  var phil2: boolean;
  var phil3: boolean;
  var phil4: boolean;
  var phil5: boolean;
  var chopstick1: boolean;
  var chopstick2: boolean;
  var chopstick3: boolean;
  var chopstick4: boolean;
  var chopstick5: boolean;

  invariant phil1_inv : !((chopstick1 == false) && (chopstick5 == false));
  invariant phil2_inv : !((chopstick2 == false) && (chopstick1 == false));
  invariant phil3_inv : !((chopstick3 == false) && (chopstick2 == false));
  invariant phil4_inv : !((chopstick4 == false) && (chopstick3 == false));
  invariant phil5_inv : !((chopstick5 == false) && (chopstick4 == false));
  invariant chopstick1_inv : (chopstick1 == (phil1 || phil2));
  invariant chopstick2_inv : (chopstick2 == (phil2 || phil3));
  invariant chopstick3_inv : (chopstick3 == (phil3 || phil4));
  invariant chopstick4_inv : (chopstick4 == (phil4 || phil5));
  invariant chopstick5_inv : (chopstick5 == (phil5 || phil1));
}
