/*
Model a preliminary design of a beverage vending machine. The machine can either deliver beer or soda.

The state space is S = { pay , select , soda , beer }. The set of initial states consists of only one state, i.e., I = { pay }. The (user) action insert coin denotes the insertion of a coin, while the (machine) actions get soda and get beer denote the delivery of soda and beer, respectively.

Use the variable names pay, select, soda and beer.

Write an LTL property that checks that the vending machine only delivers a drink after being provided with a coin. You may introduce auxiliary variables to do this if you need to.
*/

module VendingMachine {
  type Input = record { value: boolean, pay: boolean };
  type Output = record { pay: boolean, value: boolean };
  type Variable = record { value: boolean, pay: boolean };

  var assumenotcoin_inserted: boolean;
  var assumecoin_inserted: Variable;
  var state: record { pay: boolean };
  var current_state: Variable;
  var coin_inserted: Variable;

  input insert_coin: Input;

  output get_soda: Output;
  output get_beer: Output;

  init {
    current_state.value = state.pay; 
    assumenotcoin_inserted = false; 
    get_soda.value = false; 
    get_beer.value = false; 

  }
  procedure step()
    modifies assumenotcoin_inserted;
    modifies coin_inserted;
    modifies current_state;
  {
    coin_inserted = insert_coin; 
    current_state = current_state; 
    assumecoin_inserted.value = coin_inserted.value; 
    assumenotcoin_inserted = !coin_inserted.value; 
    get_soda.value = (current_state.value && assumecoin_inserted.value); 
    get_beer.value = (current_state.value && assumecoin_inserted.value); 
    current_state.value = (get_soda.value || get_beer.value); 
    assumenotcoin_inserted = !coin_inserted.value; 
    assumecoin_inserted.value = coin_inserted.value; 
    coin_inserted.value = assumecoin_inserted.value; 
    get_soda.value = (current_state.value && assumecoin_inserted.value); 
    get_beer.value = (current_state.value && assumecoin_inserted.value); 
  }

  next {
    call step();
  }
  invariant pay_inv : (current_state.value ==> !(get_soda.value || get_beer.value));
  invariant select_inv : (insert_coin.pay ==> (get_soda.value || get_beer.value));
  invariant soda_inv : (insert_coin.value ==> !get_soda.value);
  invariant beer_inv : (insert_coin.pay ==> !get_beer.value);
}
