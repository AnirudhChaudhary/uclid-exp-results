/*
Model a preliminary design of a beverage vending machine. The machine can either deliver beer or soda.

The state space is S = { pay , select , soda , beer }. The set of initial states consists of only one state, i.e., I = { pay }. The (user) action insert coin denotes the insertion of a coin, while the (machine) actions get soda and get beer denote the delivery of soda and beer, respectively.

Use the variable names pay, select, soda and beer.

Write an LTL property that checks that the vending machine only delivers a drink after being provided with a coin. You may introduce auxiliary variables to do this if you need to.
*/

module BeverageVendingMachine {
  type Range = enum { beer, pay, select, soda };

  var bool: boolean;
  var no_response: boolean;
  var current_state: Range;
  var coin_inserted: boolean;
  var drink_delivered: boolean;

  input insert_coin: boolean;
  input get_soda: boolean;
  input get_beer: boolean;

  init {
    current_state = pay; 
    coin_inserted = false; 

  }
  procedure step()
    modifies no_response;
    modifies current_state;
    modifies coin_inserted;
  {
    coin_inserted = (coin_inserted || insert_coin); 
    if ((current_state == pay) && !coin_inserted) {
      no_response = true; 
      assert no_response; 
    }
    if (insert_coin) {
      current_state = select; 
    }
    if (get_soda && coin_inserted) {
      current_state = soda; 
    }
    if (get_beer && coin_inserted) {
      current_state = beer; 
    }
  }

  next {
    call step();
  }
  invariant current_state_inv : ((current_state == beer) || (current_state == soda));
  invariant coin_inserted_inv : (coin_inserted == true);
  invariant no_response_inv : (no_response == ((current_state == pay) && !coin_inserted));
  invariant next_inv : (insert_coin ==> ((current_state == select) && (coin_inserted == true)));
  invariant drink_delivered : ((current_state == soda) || (current_state == beer));

}
